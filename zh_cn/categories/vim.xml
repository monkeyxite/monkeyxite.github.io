<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Intellegence Evolution (关于文章 vim)</title><link>https://monkeyxite.github.io/</link><description></description><atom:link href="https://monkeyxite.github.io/zh_cn/categories/vim.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2018 &lt;a href="mailto:monkeyxite@gmail.com"&gt;Jonny Hou&lt;/a&gt; </copyright><lastBuildDate>Sun, 21 Oct 2018 15:15:54 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>way to debug vim</title><link>https://monkeyxite.github.io/zh_cn/posts/way-to-debug-vim/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;Find the right issue submit info, might be some info for getting verbose of runtime debug. Such as &lt;a href="https://github.com/SpaceVim/SpaceVim/issues"&gt;SpaceVim Issue Tracker&lt;/a&gt; or &lt;a href="https://github.com/davidhalter/jedi-vim/issues"&gt;vim-jedi issue tracker&lt;/a&gt;, providing detailed guide for stepwise debugging info&lt;/p&gt;
&lt;h3&gt;Dis functional shortcut key&lt;/h3&gt;
&lt;p&gt;Typical scenario would be triggered some error or unexpected behavior after press some key. Then it's essential to get the details by identify what happened firstly after certain key pressed (or what vim thought should be happened)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;verb&lt;/span&gt; map K?
&lt;/pre&gt;


&lt;h3&gt;Python Plugin&lt;/h3&gt;
&lt;p&gt;For python plugin, try to find python env issue inside of vim&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;jedi&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;To Be Continue&lt;/h3&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/way-to-debug-vim/</guid><pubDate>Sun, 21 Oct 2018 13:50:28 GMT</pubDate></item><item><title>Using vim to open recent files</title><link>https://monkeyxite.github.io/zh_cn/posts/2008/09/29/92html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;p&gt;d means one digital from 0 to 9, which present the recent files.&lt;/p&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2008/09/29/92html/</guid><pubDate>Mon, 29 Sep 2008 15:17:00 GMT</pubDate></item><item><title>vim jde note</title><link>https://monkeyxite.github.io/zh_cn/posts/2006/04/17/59html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;big&gt;&lt;/big&gt;&lt;big&gt;配置篇&lt;/big&gt;
&lt;/p&gt;&lt;div style="text-align:left;"&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;启用或者禁用java在用户输入括号后自动提示参数 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_cfu_java_para=0 &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 启用或者禁用 用户在用&amp;lt;c-x&amp;gt; &amp;lt;c-u&amp;gt;时显示预览 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_show_preview=0 &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 启用或者禁用 在用户输入 .  时自动提示后面的部分 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_cfu_java_dot=0 &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 启用或才禁用 使用一个图形化的提示窗口.(不推荐,太难看) &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt; let g:vjde_preview_gui=1 &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 以下做为c++使用 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt; let g:vjde_iab_exts='.cpp;.c;.vim;.rb' &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt;  &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 对指定名字的窗口进行调整,如下表示: &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class="postbody"&gt; 对以__Tag_List__为标题的窗口,在垂直方向变化,进入时40宽,离开后变成20宽 &lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span class="postbody"&gt; 对以.prj为标题的窗口,在垂直方向变化,进入时24宽,离开后变为1 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt; let g:floatingwindows=
"'&lt;strong&gt;Tag_List&lt;/strong&gt;',1,40,20;'.prj',1,24,1;'.vimproject',1,24,1;"&lt;/span&gt;&lt;/blockquote&gt;
&lt;div style="text-align:center;"&gt;   &lt;p&gt;&lt;img src="http://mfrost.typepad.com/photos/uncategorized/hamster_stretch.jpg" alt="Photo"&gt;&lt;/p&gt;   &lt;/div&gt;&lt;/div&gt;&lt;big&gt;&lt;/big&gt;&lt;big&gt;工程创建篇
&lt;/big&gt;&lt;p&gt;&lt;span class="postbody"&gt;在开始写一个java程序的时候,如果是一个简单程序,一切都无所谓.如果是一个比较大的项目.需要工程支持.在vjde的配合下,可以这样做.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 创建目录 project1 在你的工作目录上. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 打开 vim 并切换到 project1 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt; :cd project1 &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt;  &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 存储一个工程模板&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;:Vjdesave .vjde &lt;/span&gt;
&lt;/blockquote&gt;&lt;span class="postbody"&gt;  &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;在.vjde里面,会有一个参数,你可自行打开并修改.如我的一个配置文件中，编译时的输出文件夹 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_out_path='classes' &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;源代码目录 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_src_path='src' &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;编译时使用的路径,用于代码补全时类查找,也是编译时使用,最好把输出文件夹加在此处. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_lib_path='lib/servlet.jar:lib/images.jar:class' &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;如果有jsp类型文件,放在这里 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_web_app='webapps' &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;测试源代码路径 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_test_path='test' &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;系统中java命令的命令名字,默认在windows下为javaw,linux下java,理论上可以修改成为jikes &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;let g:vjde_java_command='java' &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt;  &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;修改完成后,你可以用 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;:Vjdeload .vjde &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;或者这样加载&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;:source .vjde &lt;/span&gt;
&lt;/blockquote&gt;&lt;div style="text-align:center;"&gt;   &lt;p&gt;&lt;img src="http://mfrost.typepad.com/photos/uncategorized/akagami4jm.jpg" alt="Photo"&gt;&lt;/p&gt;   &lt;/div&gt;&lt;span class="postbody"&gt;
&lt;big&gt;&lt;/big&gt;&lt;big&gt;编程开始篇
&lt;/big&gt;&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;span class="postbody"&gt;使用vjde,就可以使用已经存在的模板进行创建你的程序:
在图形界面下,可以从菜单Vim JDE-&amp;gt;Wizard-&amp;gt;New Class(with main) 开始创建一个你自己的类.它还包括一个main 方法.
vjde提供了很多的代码模板可以使用,第一个模板被定义为在当前的位置添加模板的全部内容.
同时,你可以自己定义你自己的模板为你的每一类文件.它们都会被列在 Vim JDE-&amp;gt;Wizzard的子菜里面.
你只需要把自己定义的模板放到 ~/.vim/vjde/java.vjde 即可被当作java类型文件的模板 ~/.vim/vjde/cpp.vjde 即被当作cpp类型文件的模板
关于文件类型,打开一个文件,然后用
:set filetype
即可知道当前文件的类型.
&lt;p&gt;高级技巧: 各类模板是可以互相引用的.但是,我不作递归检查.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;if !exists('g:vjde_iab_refs') &lt;/span&gt;
&lt;span class="postbody"&gt; let g:vjde_iab_refs={} &lt;/span&gt;
&lt;span class="postbody"&gt;endif &lt;/span&gt;
&lt;span class="postbody"&gt;if !has_key(g:vjde_iab_refs,'jsp') &lt;/span&gt;
&lt;span class="postbody"&gt; let g:vjde_iab_refs['jsp']=[ 'java', 'html' ] &lt;/span&gt;
&lt;span class="postbody"&gt;endif &lt;/span&gt;
&lt;span class="postbody"&gt;if !has_key(g:vjde_iab_refs,'cpp') &lt;/span&gt;
&lt;span class="postbody"&gt; let g:vjde_iab_refs['cpp']=[ 'c' ] &lt;/span&gt;
&lt;span class="postbody"&gt;endif &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt;
即是说 jsp引用 java 和 html的模板
cpp引用了c的模板.
当然,也可定义自己的引用.
&lt;/span&gt;&lt;div style="text-align:center;"&gt;   &lt;p&gt;&lt;img src="http://mfrost.typepad.com/photos/uncategorized/bunny.jpg" alt="Photo"&gt;&lt;/p&gt;   &lt;/div&gt;&lt;span class="postbody"&gt;&lt;big&gt;&lt;/big&gt;&lt;big&gt;编程日常工作篇
&lt;/big&gt;&lt;p&gt;&lt;/p&gt;&lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;代码补全 &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;   在默认的情况下,在gui环境下,用户在任何时候按下&amp;lt;c-space&amp;gt;即可进行代码提示. &lt;/span&gt;
&lt;span class="postbody"&gt; &lt;/span&gt;
&lt;span class="postbody"&gt;   如果要改变这个定义,请定义 g:vjde_completion_key &lt;/span&gt;
&lt;span class="postbody"&gt;   let g:vjde_completion_key="&amp;lt;c-l&amp;gt;" &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;添加引用的包.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;通常,我们编辑的时候,比如,使用了 Vector numbers; &lt;/span&gt;&lt;span class="postbody"&gt;&lt;/span&gt;
&lt;span class="postbody"&gt;我们已经知道了 Vector 在 java.util里,或者一些类,我们不知道在什么地方,这个时候, 把Shu标话在 Vector 上, 在通常模式下,使用 &amp;lt;leader&amp;gt;ai  &lt;/span&gt;
&lt;span class="postbody"&gt;在我系统上,是 \ai 这个组合.即可自动添加 java.util.Vector 到你的 文件上. 如果有多个,则提示你选择一个你要使用的. &lt;/span&gt;
&lt;span class="postbody"&gt;或者使用使用菜单 Vim JDE-&amp;gt;Add import &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt; &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;如果在编译时发现一个错误,就是无法找到一个类的定义,这时,可以使用: &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;Vim JDE-&amp;gt;fixerror with import  来把当前这个没有添加的类添加到文件中来. &lt;/span&gt;
&lt;span class="postbody"&gt;这个,必须使用 :make 或者 :Vjdec 编译时才能使用. &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt; &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;对编译时提示的没有捕获的异常,也可以根据需要来使用 Vim JDE-&amp;gt;fixerror with  try/catch , 这会把当前的错误行包含在一个适当的try-catch块里. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;使用 Vim JDE-&amp;gt;fixerror with throws 则把这个异常定义为 throws ,添加到函数定义上. &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt; &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 重载方法 Vim JDE-&amp;gt;Source-&amp;gt;override methods... &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;列出父类的方法,选择重载 &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 实现接口 Vim JDE-&amp;gt;Source-&amp;gt;Implement interfaces... &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;列出类的接口中要实现的方法,用户选择实现. &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;生成构造函数 Vim JDE-&amp;gt;Soruce-&amp;gt;Generate Con... &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;把已经编译过的类中每一个成员变量做为参数,生成一个构造函数. &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; 添加 Singleton 接口 Vim JDE-&amp;gt;Source-&amp;gt;Add single... &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;在当前位置为类生成一个Singlton接口.包括一个私有构造函数,一个getInstance()方法,一个实例变量. &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt; &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt; &lt;/span&gt;&lt;span class="postbody"&gt;把变量变成成员变量,局部变量,静态变量的小工具. &lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;Vim JDE-&amp;gt;Source-&amp;gt;Extract .... &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt; &lt;/span&gt;&lt;ul&gt;&lt;li&gt;&lt;span class="postbody"&gt;把引用的要排序的包选中,然后,执行此命令&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt; Vim JDE-&amp;gt;Source-&amp;gt;Sort import ... &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div style="text-align:center;"&gt;   &lt;img src="http://mfrost.typepad.com/photos/uncategorized/tanjaaskani_2.jpg" alt="Photo"&gt;  &lt;/div&gt;
&lt;span class="postbody"&gt;
&lt;big&gt;&lt;/big&gt;&lt;big&gt;编程提高篇
&lt;/big&gt;&lt;/span&gt;
&lt;span class="postbody"&gt;通常,在我们写代码的时候,我们会写很多重复的代码,如一个数据循环结构,一个Vector的遍历,一个System.out.println() , 甚至很多很多的,每天都要写很多遍的代码.
&lt;p&gt;怎么办? vjde 提供了一个方法.&lt;/p&gt;
&lt;p&gt;vjde 提供了一个iab的扩展.目前,是在输入模式下输入 &amp;lt;c-j&amp;gt;即激活这个功能.&lt;/p&gt;
&lt;p&gt;在使用这个功能前.你可以定义好自己的要使用的一个模板:如果要用java 使用,存储为 ~/.vim/vjde/java.iab, 为c++使用,存储为~/.vim/vjde/cpp.iab , 在 .iab 前是文件类型.你可以为你使用的每一种文件类型创建一种模板&lt;/p&gt;
&lt;p&gt;如,一个java 的模板按如下定义:
&lt;/p&gt;&lt;/span&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;template out ; system out &lt;/span&gt;
&lt;span class="postbody"&gt;body  &lt;/span&gt;
&lt;span class="postbody"&gt;System.out.println(|); &lt;/span&gt;
&lt;span class="postbody"&gt;endt &lt;/span&gt;
&lt;span class="postbody"&gt;template err; Sysetm.err &lt;/span&gt;
&lt;span class="postbody"&gt;body &lt;/span&gt;
&lt;span class="postbody"&gt;System.err.println(|); &lt;/span&gt;
&lt;span class="postbody"&gt;endt &lt;/span&gt;
&lt;span class="postbody"&gt;template fa ; for loop for array &lt;/span&gt;
&lt;span class="postbody"&gt;body &lt;/span&gt;
&lt;span class="postbody"&gt;for ( int i = 0 ; i &amp;lt; |.length ; i++) { &lt;/span&gt;
&lt;span class="postbody"&gt;} &lt;/span&gt;
&lt;span class="postbody"&gt;endt &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt;
&lt;p&gt;这样,当你输入
&lt;/p&gt;&lt;/span&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;          out&amp;lt;c-J&amp;gt; &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt;时,自动把本行展开成为:
&lt;/span&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;          System.out.println(); &lt;/span&gt;
&lt;span class="postbody"&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;span class="postbody"&gt;并把光标放在第一个 | 的位置.
&lt;p&gt;更多的定义和使用,请参考
&lt;/p&gt;&lt;/span&gt;&lt;blockquote&gt;&lt;span class="postbody"&gt;:h vjde-iabbr&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;Technorati Tags: &lt;a href="http://technorati.com/tag/vi" rel="tag"&gt;vi&lt;/a&gt;, &lt;a href="http://technorati.com/tag/java" rel="tag"&gt;java&lt;/a&gt;, &lt;a href="http://technorati.com/tag/jde" rel="tag"&gt;jde&lt;/a&gt;, &lt;a href="http://technorati.com/tag/vjde" rel="tag"&gt;vjde&lt;/a&gt;, &lt;a href="http://technorati.com/tag/note" rel="tag"&gt;note&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2006/04/17/59html/</guid><pubDate>Mon, 17 Apr 2006 07:16:00 GMT</pubDate></item><item><title>VIM TIP32</title><link>https://monkeyxite.github.io/zh_cn/posts/2006/03/18/49html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;compare to C and shell(bash), herein is some vim specifics about vim-script:
相对于C和shell（bash）编程，这里有些vim脚本的细节要注意：
1. A function name must be capitalized.
1. 函数名必须大写
  hex2dec is invalid
  Hex2dec is valid
  hex2dex是非法的
  Hex2dec是合法的
  while in c and shell(bash), both lowercase and uppercase is allowed.
  但是在C或bash shell中，无论大小写都是可以的。
2. how to reference the parameters
2.如何传递参数
&lt;/p&gt;&lt;blockquote&gt;   fu! Hex2dec(var1, var2)
   let str=a:var1
   let str2=a:var2
&lt;/blockquote&gt;   you must prefix the parameter name with "a:", and a:var1 itself is read-only
  你必须在参数前加前缀a:，并且a:var1是只读的
  in c, you reference the parameter directly and the parameter is writable.
  在C中，你直接调用参数并且参数是可读的
3. how to implement variable parameter
3. 如何执行变量
&lt;blockquote&gt;   fu! Hex2dec(fixpara, ...)
&lt;/blockquote&gt;     a:0 is the real number of the variable parameter when you invoke the function, with &lt;span style="font-weight:bold;"&gt;:Hex2dec("asdf", 4,5,6), a:0=3, and a:1=4 a:2=5 a:3=6&lt;/span&gt;
    当调用函数，a:0 是实数变量
  you can combine "a:" and the number to get the value
  你可以混合“a:"和数字来取得函数值
&lt;blockquote&gt;   while i
     exe "let num=a:".i
     let i=i+1
   endwhile
&lt;/blockquote&gt;  in c, the function get the real number by checking the additional parameter such as printf family, or by checking the special value such as NULL
  c中，函数取值是通过检验额外得参数比如printf族，或者检测特定得值是否为空
4. where is the vim-library
4.vim的库在哪？
 yes, vim has its own function-library, just like &lt;em&gt;.a in c
 &lt;span style="font-weight:bold;"&gt;:help functions&lt;/span&gt;
 是的，vim有它自己的函数库，就像c语言中的&lt;/em&gt;.a文件
 &lt;span style="font-weight:bold;"&gt;:help functions&lt;/span&gt;
5. can I use += or ++ operator?
5.我可以使用+=或者++这样的操作符吗？
 Nop, += and ++ (and -=, -- and so on)operator gone away in vim.
 遗憾的是vim没有类似+=和＋＋这样的操作符（-=,--这些也是）
6. How can I assign a value to a variables and fetch its value?
6.如何分配变量置并取取其值呢？
&lt;blockquote&gt;&lt;a&gt;   let var_Name=value&lt;/a&gt;
&lt;a&gt;   let var1=var2&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;a&gt;   like it does in c, except you must use &lt;span style="font-weight:bold;"&gt;let&lt;/span&gt; keyword
 除了必须用关键字&lt;span style="font-weight:bold;"&gt;let&lt;/span&gt;以外，就像在c中做的一样。
7. Can I use any ex-mode command in a function?
7. 我可以在ex模式下调用函数吗？
 As I know, yes, just use it directly, as if every line you type appears in the familar &lt;span style="font-weight:bold;"&gt;: &lt;/span&gt;
 据我所知，是的，可以直接用，就像每行都是你在熟悉的&lt;span style="font-weight:bold;"&gt;：&lt;/span&gt;后输入的一样
8. Can I call a function recurse?
8. 可以使用递归调用吗？
 Yes, but use it carefully to avoid infinte call.
 可以，但是要小心，避免无穷调用！
9. Can I call another function in a function?
9. 可以在函数中调用函数吗？
 Course, like C does.
 当然，就像C一样
10. Must I compile the function?
10. 我必须编译函数吗？
  No, you needn't and you can't, just &lt;span style="font-weight:bold;"&gt;:so script_name&lt;/span&gt;, after this you can call the function freely.
  不，你没必要也不能，仅仅&lt;span style="font-weight:bold;"&gt;:so script_name&lt;/span&gt;，之后就可以自由调用该函数了
11. Is it has integer and char or float data type?
11. 有整型，字符，浮点这样的数据类型吗？
  No, like perl, vim script justify the variable type depend upon the context
  没有，就像perl，vim脚本自动根据变量值调整变量类型
&lt;/a&gt;&lt;blockquote&gt;&lt;a&gt;   :let a=1&lt;/a&gt;
&lt;a&gt;   :let a=a."asdf"&lt;/a&gt;
&lt;a&gt;   :echo a&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;a&gt;   you'll get &lt;code&gt;1asdf'
  将得到 &amp;lt;/a&amp;gt;&lt;/code&gt;1asdf'&lt;blockquote&gt;&lt;a&gt;   :let a=1&lt;/a&gt;
&lt;a&gt;   :let a=a+2&lt;/a&gt;
&lt;a&gt;   :echo a&lt;/a&gt;
&lt;a&gt;&lt;/a&gt;&lt;/blockquote&gt;&lt;/a&gt;&lt;a&gt;   you'll get 3
  &lt;/a&gt;将得到 3
&lt;a&gt;   But it differs from perl.
  但是它和perl有区别
12. Must I append a &lt;span style="font-weight:bold;"&gt;&lt;code&gt;;'&amp;lt;/span&amp;gt; in every statement?
  必须在每一句后边加&amp;lt;span style="font-weight:bold;"&amp;gt;';'&amp;lt;/span&amp;gt;吗？
  No, never do that.
  不，没必要
  ; is required in C, and optional in shell for each statement in a alone line.
  ；在C是必须的，在shell中一行中的每一句是可选的
  But is forbidden in vim.
  但是在vim是禁止的
  if you want combine servals statement in one single line, use &amp;lt;span style="font-weight:bold;"&amp;gt;&lt;/code&gt;|'&lt;/span&gt;.
  如果想在单行里边写多句，使用&lt;span style="font-weight:bold;"&gt;‘|'&lt;/span&gt;
  Take your mind that every statement appears in function should be valid in ex-mode(except for some special statement).
  谨记除少数特殊声明外，函数中每一句都可以在ex模式下合法可用
&lt;/a&gt;
&lt;p&gt;Technorati Tags: &lt;a href="http://technorati.com/tag/vi" rel="tag"&gt;vi&lt;/a&gt;, &lt;a href="http://technorati.com/tag/editor" rel="tag"&gt;editor&lt;/a&gt;
&lt;a href="http://technorati.com/tag/editor" rel="tag"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2006/03/18/49html/</guid><pubDate>Sat, 18 Mar 2006 09:25:00 GMT</pubDate></item><item><title>VIM TIP34</title><link>https://monkeyxite.github.io/zh_cn/posts/2006/02/16/44html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;a href="http://vim.sourceforge.net/tip_view.php?tip_id=34"&gt;VimTip 34: control the position of the new window&lt;/a&gt;&lt;br&gt;控制新窗口的位置&lt;br&gt;&lt;br&gt;&lt;b&gt;:se splitbelow &lt;/b&gt;&lt;br&gt;make the new window appears below the current window.&lt;br&gt;在当前窗口下方打开新窗口&lt;br&gt;&lt;b&gt;:se splitright&lt;/b&gt;&lt;br&gt;make the new window appears in right.(only 6.0 version can do a vsplit)&lt;br&gt;在当前窗口右方打开新窗口（只有在6.0版 可使用vsplit）&lt;br&gt;&lt;br&gt;&lt;br&gt;Technorati Tags: &lt;a href="http://technorati.com/tag/VI" rel="tag"&gt;VI&lt;/a&gt;, &lt;a href="http://technorati.com/tag/EDITOR" rel="tag"&gt;EDITOR&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2006/02/16/44html/</guid><pubDate>Thu, 16 Feb 2006 01:23:00 GMT</pubDate></item><item><title>VIM TIP33</title><link>https://monkeyxite.github.io/zh_cn/posts/2006/02/15/43html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;a href="http://vim.sourceforge.net/tip_view.php?tip_id=32"&gt;VimTip 33: toggle off the line-number when enter on-line help&lt;/a&gt;&lt;br&gt;在帮助文档里关闭行号&lt;br&gt;&lt;br&gt;I like the line-number for myself editing. But I hate it in on-line help page because it force the screen wrapped.&lt;br&gt;
我喜欢在自己编辑时有行号。但是我讨厌在帮助文档里边的行号，因为这样使屏幕转行了。&lt;br&gt;&lt;b&gt;:au filetype help :se nonu&lt;/b&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;Technorati Tags: &lt;a href="http://technorati.com/tag/VI" rel="tag"&gt;VI&lt;/a&gt;, &lt;a href="http://technorati.com/tag/EDITOR" rel="tag"&gt;EDITOR&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2006/02/15/43html/</guid><pubDate>Wed, 15 Feb 2006 05:17:00 GMT</pubDate></item><item><title>VIM TIP31</title><link>https://monkeyxite.github.io/zh_cn/posts/2006/02/13/42html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;To find and replace one or more occurences of a given text pattern with a new text string, use the s[ubstitute] command.
为了查找替换文中出现过的一个或多个文本串，使用s命令
There are a variety of options, but these are what you most probably want:
有很多可选的变量，看看什么是你最需要的：
&lt;b&gt;:%s/foo/bar/g   &lt;/b&gt;        find each occurance of 'foo' and replace it with 'bar' without asking for confirmation
&lt;b&gt;                                      &lt;/b&gt;不确认替换每一个foo为bar&lt;b&gt;
:%s/foo/bar/gc  &lt;/b&gt;        find each occurance of 'foo' and replace it with 'bar' asking for confirmation first
                                                首次向用户确认并替换每一个foo为bar
&lt;b&gt;:%s//bar/gc  &lt;/b&gt;    find (match exact word only) and replace each occurance of 'foo' with 'bar'
                                               将一个词foo替换为bar
&lt;b&gt;:%s/foo/bar/gci &lt;/b&gt;        find (case insensitive) and replace each occurance of 'foo' with 'bar'
                                                大小写不敏感替换foo为bar
&lt;b&gt;:%s/foo/bar/gcI  &lt;/b&gt;       find (case sensitive) and replace each occurance of 'foo' with 'bar'
                                                大小写敏感替换foo为bar&lt;/p&gt;
&lt;p&gt;NB: Without the 'g' flag, replacement occurs only for the first occurrence in each line.
NB: 没有g选项的话，仅仅替换每行的第一个匹配项
For a full description and some more interesting examples of the substitute command refer to
想知道替换详细的解释和一些有趣的例子请参考
&lt;b&gt;:help substitute&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;See also:
或者：
&lt;b&gt;:help cmdline-ranges
:help pattern
:help gdefault&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Technorati Tags: &lt;a href="http://technorati.com/tag/VI" rel="tag"&gt;VI&lt;/a&gt;, &lt;a href="http://technorati.com/tag/EDITOR" rel="tag"&gt;EDITOR&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2006/02/13/42html/</guid><pubDate>Mon, 13 Feb 2006 04:18:00 GMT</pubDate></item><item><title>VIM TIP30</title><link>https://monkeyxite.github.io/zh_cn/posts/2006/02/8/41html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;To increase a number under or nearest to the right of the cursor, go to Normal mode and type:
在一般模式下可以这样来递增光标下或最靠近光标右侧的数字：
 &lt;b&gt;   Ctrl-A&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To decrease, type:
递减可以使用：
&lt;b&gt;    Ctrl-X&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Using this in a macro simplifies generating number sequences a lot.
使用这样的宏可以简化对数字序列的操作。&lt;/p&gt;
&lt;p&gt;Technorati Tags: &lt;a href="http://technorati.com/tag/VI" rel="tag"&gt;VI&lt;/a&gt;, &lt;a href="http://technorati.com/tag/EDITOR" rel="tag"&gt;EDITOR&lt;/a&gt;
&lt;a href="http://technorati.com/tag/EDITOR" rel="tag"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2006/02/8/41html/</guid><pubDate>Wed, 08 Feb 2006 05:25:00 GMT</pubDate></item><item><title>VIM TIP28</title><link>https://monkeyxite.github.io/zh_cn/posts/2006/02/8/40html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;a href="http://vim.sourceforge.net/tip_view.php?tip_id=28"&gt;VimTip 28: add a line-number to every line without cat or awk alike utilities.&lt;/a&gt;&lt;br&gt;不使用cat或awk等在添加每行都添加行号&lt;br&gt;&lt;br&gt;With
Unix-like environment, you can use cat or awk to generate a line number
easily, because vim has a friendly interface with shell, so everything
work in vim as well as it does in shell.&lt;br&gt;在类Unix环境下，你可以轻松的使用cat或awk产生行号，因为vim与shell有友好的接口，所以同样可以在vim中执行shell中的操作。&lt;br&gt;&lt;b&gt;:%!call -n&lt;/b&gt;&lt;br&gt;or&lt;br&gt;&lt;b&gt;:%!awk '{print NR,$0}'&lt;/b&gt;&lt;br&gt;&lt;br&gt;But, if you use vim in MS-DOS, of win9x, win2000, you loss these tookit.here is a very simple way to archive this only by vim:&lt;br&gt;但是，如果你在MS的系统下，你将无法使用这些工具。下边是仅靠vim来实现上述功能的方法：&lt;br&gt;&lt;blockquote&gt;fu! LineIt()&lt;br&gt; exe ":s/^/".line(".")."/"&lt;br&gt;endf&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;Well, a sequence composed with alphabet is as easy as above:&lt;br&gt;那么，压缩为一行包括同样简单：&lt;br&gt;&lt;b&gt; exe "s/^/".nr2char(line("."))."/"&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Technorati Tags: &lt;a href="http://technorati.com/tag/VI" rel="tag"&gt;VI&lt;/a&gt;, &lt;a href="http://technorati.com/tag/EDITOR" rel="tag"&gt;EDITOR&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2006/02/8/40html/</guid><pubDate>Wed, 08 Feb 2006 05:23:00 GMT</pubDate></item><item><title>VIM TIP29</title><link>https://monkeyxite.github.io/zh_cn/posts/2006/02/8/39html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;div&gt;&lt;br&gt;&lt;a href="http://vim.sourceforge.net/tip_view.php?tip_id=29"&gt;VimTip 29: reverse all the line with only 7 keystroke in vim&lt;/a&gt;&lt;br&gt;使用7个键反转所有行&lt;br&gt;&lt;br&gt;&lt;b&gt;:g/^/m0&lt;/b&gt;&lt;br&gt;well, &lt;br&gt;1. &lt;b&gt;: &lt;/b&gt;bring you to command-line mode(also known as ex-mode) from normal-mode(also known as command mode).&lt;br&gt;1. &lt;b&gt;: &lt;/b&gt;使你从一般模式进入命令行&lt;br&gt;2. &lt;b&gt;g&lt;/b&gt;
means you'll take an action through the whole file, generally perform a
search, &lt;code&gt;v' also perform a search but it match the line not match the
canonical expression.&amp;lt;br&amp;gt;2.&amp;lt;b&amp;gt;g&amp;lt;/b&amp;gt; 表明作用域将是整个文件，一般使用在搜索中。'&amp;lt;b&amp;gt;v&amp;lt;/b&amp;gt;'也在搜索中使用但是不能使用正则表达式。&amp;lt;br&amp;gt;3.&amp;lt;b&amp;gt; /&amp;lt;/b&amp;gt; begins the regular express&amp;lt;br&amp;gt;3.&amp;lt;b&amp;gt;/&amp;lt;/b&amp;gt;开始正则表达式&amp;lt;br&amp;gt;4.&amp;lt;b&amp;gt; ^ &amp;lt;/b&amp;gt;is a special character respect the start of a line.&amp;lt;br&amp;gt;4.&amp;lt;b&amp;gt; ^&amp;lt;/b&amp;gt;使表示行首的元字符&amp;lt;br&amp;gt;5. the second&amp;lt;b&amp;gt; /&amp;lt;/b&amp;gt; ends the regular express and indicate that the remains is action to do.&amp;lt;br&amp;gt;5. 第二个&amp;lt;b&amp;gt;/&amp;lt;/b&amp;gt;在正则表达式的末尾，并表明有后续操作&amp;lt;br&amp;gt;6. &amp;lt;b&amp;gt;m&amp;lt;/b&amp;gt; means move,&lt;/code&gt;&lt;b&gt;t&lt;/b&gt;&lt;code&gt;and&lt;/code&gt;&lt;b&gt;co&lt;/b&gt;' for copy, `d' for delete&lt;br&gt;6. &lt;b&gt;m&lt;/b&gt; 表示移动，'&lt;b&gt;t&lt;/b&gt;'&lt;b&gt; &lt;/b&gt;和'&lt;b&gt;co&lt;/b&gt;'表示复制，d为删除&lt;br&gt;7. &lt;b&gt;0 &lt;/b&gt;is the destination line.&lt;br&gt;7. &lt;b&gt;0&lt;/b&gt; 是目标行号&lt;br&gt;you can use &lt;br&gt;你可以使用&lt;br&gt;&lt;b&gt;:g/regexp/t$&lt;/b&gt;&lt;br&gt;to filter all lines and pick the match line together and copy them to the end of the buffer or&lt;br&gt;为了过滤所有的行并全部取出匹配行到buffer中&lt;br&gt;&lt;b&gt;:g/regexp/y A&lt;/b&gt;&lt;br&gt;to put them into a register(not eax, ebx...)&lt;br&gt;将过滤出的匹配项放入寄存器(非汇编中的eax、ebx)&lt;br&gt;&lt;br&gt;&lt;br&gt;Technorati Tags: &lt;a href="http://technorati.com/tag/VIM" rel="tag"&gt;VIM&lt;/a&gt;, &lt;a href="http://technorati.com/tag/EDITOR" rel="tag"&gt;EDITOR&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://monkeyxite.github.io/zh_cn/posts/2006/02/8/39html/</guid><pubDate>Wed, 08 Feb 2006 05:23:00 GMT</pubDate></item></channel></rss>