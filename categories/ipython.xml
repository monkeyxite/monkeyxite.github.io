<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Intellegence Evolution (Posts about ipython)</title><link>https://monkeyxite.github.io/</link><description></description><atom:link href="https://monkeyxite.github.io/categories/ipython.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:monkeyxite@gmail.com"&gt;Jonny Hou&lt;/a&gt; </copyright><lastBuildDate>Sun, 14 Oct 2018 15:31:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>iPython in MacOS autoComplete and highlight configure</title><link>https://monkeyxite.github.io/posts/2008/05/8/88html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;So here is the improvement version of ~/.ipython/ipy_user_conf.py&lt;/p&gt;
&lt;p&gt;P.S: Mac OS X v10.5.2; python 2.5.1; ipython 0.8.2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;
"""
uer configuration file for IPython
This is a more flexible and safe way to configure ipython than *rc files
(ipythonrc, ipythonrc-pysh etc.)
This file is always imported on ipython startup. You can import the
ipython extensions you need here (see IPython/Extensions directory).
Feel free to edit this file to customize your ipython experience.
Note that as such this file does nothing, for backwards compatibility.
Consult e.g. file 'ipy_profile_sh.py' for an example of the things
you can do here.
See http://ipython.scipy.org/moin/IpythonExtensionApi for detailed
description on what you could do here.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;"""&lt;/p&gt;
&lt;h2&gt;Most of your config files and extensions will probably start with this import&lt;/h2&gt;
&lt;p&gt;import IPython.ipapi
ip = IPython.ipapi.get()&lt;/p&gt;
&lt;h2&gt;You probably want to uncomment this if you did %upgrade -nolegacy&lt;/h2&gt;
&lt;h2&gt;import ipy_defaults&lt;/h2&gt;
&lt;p&gt;def main():&lt;/p&gt;
&lt;h2&gt;Handy tab-completers for %cd, %run, import etc.&lt;/h2&gt;
&lt;h2&gt;Try commenting this out if you have completion problems/slowness&lt;/h2&gt;
&lt;h2&gt;import ipy_stock_completers&lt;/h2&gt;
&lt;h2&gt;uncomment if you want to get ipython -p sh behaviour&lt;/h2&gt;
&lt;h2&gt;without having to use command line switches&lt;/h2&gt;
&lt;h2&gt;import ipy_profile_sh&lt;/h2&gt;
&lt;p&gt;import ipy_defaults&lt;/p&gt;
&lt;h2&gt;o = ip.options&lt;/h2&gt;
&lt;h2&gt;An example on how to set options&lt;/h2&gt;
&lt;h2&gt;o.autocall = 1&lt;/h2&gt;
&lt;h2&gt;o.system_verbose = 0&lt;/h2&gt;
&lt;h2&gt;added to fix readline support, temporarily&lt;/h2&gt;
&lt;p&gt;import readline&lt;/p&gt;
&lt;p&gt;readline.parse_and_bind ("bind ^I rl_complete")&lt;/p&gt;
&lt;p&gt;main()&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Coding</category><category>ipython</category><category>Mac</category><category>python</category><category>tips</category><guid>https://monkeyxite.github.io/posts/2008/05/8/88html/</guid><pubDate>Wed, 07 May 2008 22:50:00 GMT</pubDate></item><item><title>living in ipython</title><link>https://monkeyxite.github.io/posts/2007/11/18/75html/</link><dc:creator>Jonny Hou</dc:creator><description>&lt;div&gt;&lt;p&gt;In [2]: print "hello world"
hello world&lt;/p&gt;
&lt;p&gt;In [3]: %hi
%hist     %history&lt;/p&gt;
&lt;p&gt;In [3]: %hist
1: True == False&lt;/p&gt;
&lt;p&gt;2: print "hello world"&lt;/p&gt;
&lt;p&gt;In [4]: In
Out[4]: ['\n', 'True == False\n', 'print "hello world"\n',
       'ipmagic("%hist ")\n', 'In\n']&lt;/p&gt;
&lt;p&gt;In [5]: Out
Out[5]:
{1: False,
4: ['\n', 'True == False\n', 'print "hello world"\n',
       'ipmagic("%hist ")\n', 'In\n', 'Out\n'],
5: }&lt;/p&gt;
&lt;p&gt;In [6]: print &lt;em&gt;i, _ii, _iii, &lt;/em&gt;, __, &lt;strong&gt;&lt;em&gt;
Out
In
ipmagic("%hist ")
{1: False, 4: ['\n', 'True == False\n', 'print "hello world"\n',
        'ipmagic("%hist ")\n', 'In\n', 'Out\n',
        'print &lt;/em&gt;i, &lt;em&gt;ii, _iii, &lt;/em&gt;, &lt;/strong&gt;, &lt;strong&gt;&lt;em&gt;\n'], 5: {...}} ['\n',
        'True == False\n', 'print "hello world"\n',
        'ipmagic("%hist ")\n', 'In\n', 'Out\n',
        'print &lt;/em&gt;i, &lt;em&gt;ii, _iii, &lt;/em&gt;, &lt;/strong&gt;, ___\n'] False&lt;/p&gt;
&lt;p&gt;编辑
&lt;/p&gt;&lt;ul&gt;&lt;li&gt;支持行编辑，默认为vi键绑定。可以按 ESC 允许行被编辑&lt;/li&gt;&lt;li&gt;允许方便编辑所以代码&lt;/li&gt;&lt;li&gt;%edit调出 环境变量EDITOR定义的编辑器&lt;/li&gt;&lt;li&gt;%edit star stop 可以对某一区域编辑&lt;/li&gt;&lt;/ul&gt;编辑例子
&lt;blockquote&gt; In [4]: hist
   1:
   class A:
       def &lt;strong&gt;init&lt;/strong&gt;(self, start, end):
           """Some comment here."""
&lt;p&gt;2: a = 1
   3: b = 2
   4: c = 0
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;span style="font-weight:bold;"&gt;%edit&lt;/span&gt;
   Will open up an empty editor
&lt;span style="font-weight:bold;"&gt;%edit 2 4&lt;/span&gt;
   Will open an editor containing lines 2 and 4
&lt;span style="font-weight:bold;"&gt;%edit 1&lt;/span&gt;
   Will open up the class definition
&lt;span style="font-weight:bold;"&gt;%edit 1:4&lt;/span&gt;
w
   Will open up the editor with lines 1, 2 and 3&lt;/p&gt;
&lt;p&gt;会话和日志
每次使用后会话都有记录。并且可以重放会话快速恢复到上次会话的最后状态&lt;/p&gt;
&lt;p&gt;开始记录日志可以使用 -log 或 -logfile  在命令行或者使用%logstart在interpreter。%logstate可以显示当前log的状态&lt;/p&gt;
&lt;p&gt;%logoff可以暂停记录，%logon恢复&lt;/p&gt;
&lt;p&gt;继续某次会话可以通过命令行使用 -logfile &lt;/p&gt;
&lt;p&gt;对象自省
自省可以像标准python那样
？是个快捷键
例子
&lt;/p&gt;&lt;blockquote&gt;In [2]: sys.path?
Type:           list
Base Class:   &lt;br&gt;
String Form:    ['', '/usr/bin', '/disk2/ag/common',
                '/usr/lib/python24.zip', '/usr/lib/python2.4',
                '/usr/lib/pyt &amp;amp;lt;...&amp;amp;gt; 2.4/site-packages/Numeric',
                '/usr/lib/python2.4/site-packages/gtk-2.0',
                '/home/dstanek/.ipython']
Namespace:      Interactive
Length:         13
Docstring:
    list() -&amp;amp;gt; new list
    list(sequence) -&amp;amp;gt; new list initialized from sequence's items
&lt;/blockquote&gt;
&lt;blockquote&gt;In [1]: class C(object):
   ...:     a = "a string"
   ...:     def f(self, name, value):
   ...:         """my docstring here"""
   ...: 
&lt;p&gt;In [2]: C.a?
Type:           str
Base Class:   &lt;br&gt;
String Form:    a string
Namespace:      Interactive
Length:         8
Docstring:
    str(object) -&amp;amp;gt; string&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Return a nice string representation of the object.
If the argument is a string, the return value is the
same object.
&lt;/pre&gt;


&lt;p&gt;In [3]: ?C.f
Type:           instancemethod
Base Class:   &lt;br&gt;
String Form:  &lt;br&gt;
Namespace:      Interactive
File:           /mnt/home/dstanek/
Definition:     C.f(self, name, value)
Docstring:
   my docstring here&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
其他技巧
&lt;ul&gt;&lt;li&gt;集成调试器&lt;/li&gt;&lt;li&gt;集成profiler&lt;/li&gt;&lt;li&gt;Python jobs can be run in the background in a thread.&lt;/li&gt;&lt;li&gt;支持配置文件&lt;/li&gt;&lt;/ul&gt;结论
&lt;p&gt;&lt;b&gt;It's a good thing&lt;/b&gt; and is available at
   http://ipython.scipy.org/&lt;/p&gt;

&lt;p&gt;A sprint to add other cool things may be a useful exercise.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;To set ipython to be the default:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Python honors the environment variable PYTHONSTARTUP and will execute
   at startup the file referenced by this variable. If you put at the end
   of this file the following two lines of code:&lt;/p&gt;&lt;pre&gt;    import IPython
   IPython.Shell.IPShell().mainloop(sys_exit=1)
   &lt;/pre&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Coding</category><category>ipython</category><category>python</category><guid>https://monkeyxite.github.io/posts/2007/11/18/75html/</guid><pubDate>Sun, 18 Nov 2007 04:48:00 GMT</pubDate></item></channel></rss>